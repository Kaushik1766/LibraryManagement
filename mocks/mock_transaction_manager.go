// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../../mocks/mock_transaction_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Kaushik1766/LibraryManagement/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
	isgomock struct{}
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// GetOverdueTransactions mocks base method.
func (m *MockTransactionManager) GetOverdueTransactions(ctx context.Context) ([]models.OverdueTransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueTransactions", ctx)
	ret0, _ := ret[0].([]models.OverdueTransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueTransactions indicates an expected call of GetOverdueTransactions.
func (mr *MockTransactionManagerMockRecorder) GetOverdueTransactions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueTransactions", reflect.TypeOf((*MockTransactionManager)(nil).GetOverdueTransactions), ctx)
}

// GetTransactions mocks base method.
func (m *MockTransactionManager) GetTransactions(ctx context.Context, dto models.GetTransactionRequestDTO) ([]models.TransactionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, dto)
	ret0, _ := ret[0].([]models.TransactionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockTransactionManagerMockRecorder) GetTransactions(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockTransactionManager)(nil).GetTransactions), ctx, dto)
}

// IssueBook mocks base method.
func (m *MockTransactionManager) IssueBook(ctx context.Context, bookId, issueFor string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueBook", ctx, bookId, issueFor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueBook indicates an expected call of IssueBook.
func (mr *MockTransactionManagerMockRecorder) IssueBook(ctx, bookId, issueFor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueBook", reflect.TypeOf((*MockTransactionManager)(nil).IssueBook), ctx, bookId, issueFor)
}

// ReturnBook mocks base method.
func (m *MockTransactionManager) ReturnBook(ctx context.Context, bookId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", ctx, bookId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockTransactionManagerMockRecorder) ReturnBook(ctx, bookId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockTransactionManager)(nil).ReturnBook), ctx, bookId)
}

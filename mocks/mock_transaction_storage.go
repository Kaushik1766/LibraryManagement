// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../../mocks/mock_transaction_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Kaushik1766/LibraryManagement/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionStorage is a mock of TransactionStorage interface.
type MockTransactionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStorageMockRecorder
	isgomock struct{}
}

// MockTransactionStorageMockRecorder is the mock recorder for MockTransactionStorage.
type MockTransactionStorageMockRecorder struct {
	mock *MockTransactionStorage
}

// NewMockTransactionStorage creates a new mock instance.
func NewMockTransactionStorage(ctrl *gomock.Controller) *MockTransactionStorage {
	mock := &MockTransactionStorage{ctrl: ctrl}
	mock.recorder = &MockTransactionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStorage) EXPECT() *MockTransactionStorageMockRecorder {
	return m.recorder
}

// GetAllTransactions mocks base method.
func (m *MockTransactionStorage) GetAllTransactions(dto models.GetTransactionRequestDTO) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions", dto)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockTransactionStorageMockRecorder) GetAllTransactions(dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockTransactionStorage)(nil).GetAllTransactions), dto)
}

// GetOverDueTransactions mocks base method.
func (m *MockTransactionStorage) GetOverDueTransactions(userId string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverDueTransactions", userId)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverDueTransactions indicates an expected call of GetOverDueTransactions.
func (mr *MockTransactionStorageMockRecorder) GetOverDueTransactions(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverDueTransactions", reflect.TypeOf((*MockTransactionStorage)(nil).GetOverDueTransactions), userId)
}

// IssueBook mocks base method.
func (m *MockTransactionStorage) IssueBook(bookId, userId, issueFor string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueBook", bookId, userId, issueFor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueBook indicates an expected call of IssueBook.
func (mr *MockTransactionStorageMockRecorder) IssueBook(bookId, userId, issueFor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueBook", reflect.TypeOf((*MockTransactionStorage)(nil).IssueBook), bookId, userId, issueFor)
}

// ReturnBook mocks base method.
func (m *MockTransactionStorage) ReturnBook(bookId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", bookId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockTransactionStorageMockRecorder) ReturnBook(bookId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockTransactionStorage)(nil).ReturnBook), bookId, userId)
}

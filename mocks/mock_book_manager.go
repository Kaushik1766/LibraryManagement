// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../../mocks/mock_book_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Kaushik1766/LibraryManagement/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBookManager is a mock of BookManager interface.
type MockBookManager struct {
	ctrl     *gomock.Controller
	recorder *MockBookManagerMockRecorder
	isgomock struct{}
}

// MockBookManagerMockRecorder is the mock recorder for MockBookManager.
type MockBookManagerMockRecorder struct {
	mock *MockBookManager
}

// NewMockBookManager creates a new mock instance.
func NewMockBookManager(ctrl *gomock.Controller) *MockBookManager {
	mock := &MockBookManager{ctrl: ctrl}
	mock.recorder = &MockBookManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookManager) EXPECT() *MockBookManagerMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBookManager) AddBook(ctx context.Context, bookReq models.AddBookDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, bookReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBookManagerMockRecorder) AddBook(ctx, bookReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookManager)(nil).AddBook), ctx, bookReq)
}

// GetAllBooks mocks base method.
func (m *MockBookManager) GetAllBooks(ctx context.Context, title, author string) ([]models.BookDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", ctx, title, author)
	ret0, _ := ret[0].([]models.BookDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookManagerMockRecorder) GetAllBooks(ctx, title, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookManager)(nil).GetAllBooks), ctx, title, author)
}
